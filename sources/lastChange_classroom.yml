name: GitHub Classroom Workflow
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:

  setup-database:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5438:5432
        options: >-
          --health-cmd="pg_isready -h localhost -U postgres"
          --health-timeout=30s
          --health-retries=3

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install PostgreSQL client
        run: sudo apt-get install postgresql-client

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -U postgres; do
            echo "Waiting for postgres to be ready..."
            sleep 2
          done

      - name: Create tables and insert data
        run: |
          psql -h localhost -U postgres -d test_db -c "
          CREATE TABLE loyalty (
            id SERIAL PRIMARY KEY,
            username VARCHAR(255) NOT NULL,
            reservationCount INT NOT NULL,
            status VARCHAR(50) NOT NULL,
            discount INT NOT NULL
          );

          CREATE TABLE hotel (
            id SERIAL PRIMARY KEY,
            hotelUid UUID NOT NULL,
            name VARCHAR(255) NOT NULL,
            country VARCHAR(100) NOT NULL,
            city VARCHAR(100) NOT NULL,
            address VARCHAR(255) NOT NULL,
            stars INT NOT NULL,
            price INT NOT NULL
          );

          CREATE TABLE reservation (
            id SERIAL PRIMARY KEY,
            reservationUid UUID NOT NULL,
            username VARCHAR(255) NOT NULL,
            paymentUid UUID NOT NULL,
            hotelUid UUID NOT NULL,
            status VARCHAR(50) NOT NULL,
            startDate DATE NOT NULL,
            endDate DATE NOT NULL
          );

          CREATE TABLE payment (
            id SERIAL PRIMARY KEY,
            paymentUid UUID NOT NULL,
            status VARCHAR(50) NOT NULL,
            price INT NOT NULL
          );

          -- Insert test data for hotels
          INSERT INTO hotel (id, hotelUid, name, country, city, address, stars, price)
          VALUES
            (1, '049161bb-badd-4fa8-9d90-87c9a82b0668', 'Ararat Park Hyatt Moscow', 'Россия', 'Москва', 'Неглинная ул., 4', 5, 10000);

          -- Insert test data for loyalty
          INSERT INTO loyalty (id, username, reservationCount, status, discount)
          VALUES
            (1, 'Test Max', 25, 'GOLD', 10);
          "


  build:
    name: Autograding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: docker/setup-buildx-action@v2

      # TODO build and run unit tests

      - name: Build images
        timeout-minutes: 10
        run: docker compose build

      - name: Run containers
        timeout-minutes: 5
        run: |
          docker compose up -d
          ./scripts/wait-script.sh
        env:
          WAIT_PORTS: 8080,8070,8060,8050

      - name: Run API Tests
        uses: matt-ball/newman-action@master
        with:
          # TODO insert your variant
          collection: v2/postman/collection.json
          environment: v2/postman/environment.json
          delayRequest: 100
          reporters: '[ "cli" ]'

      - uses: education/autograding@v1
        id: autograder
        continue-on-error: true


      - name: Stop containers
        if: always()
        continue-on-error: true
        run: docker compose down -v